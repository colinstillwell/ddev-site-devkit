#!/usr/bin/env bash

#ddev-generated
## Command provided by https://github.com/colinstillwell/ddev-site-devkit
## Description: Get a config value by name from a given format and location.
## Usage: devkit-config-get [flags]
## Example: "ddev devkit-config-get --name=EXAMPLE --format=env --location=web"
## Flags: [{"Name":"name","Usage":"The name of the variable to get the value for","Type":"string"},{"Name":"format","Usage":"How to interpret the location","Type":"string"},{"Name":"location","Usage":"Where to read from","Type":"string"}]
## Aliases: devkit:config:get,devkit-get-config,devkit:get:config

# Exit on error; treat unset variables as errors; fail pipelines if any command fails
set -euo pipefail

# Defaults
NAME=""
FORMAT=""
LOCATION=""

# Parse flags
for ARG in "$@"; do
  case "$ARG" in
    --name=*)     NAME="${ARG#*=}"; shift; continue ;;
    --format=*)   FORMAT="${ARG#*=}"; shift; continue ;;
    --location=*) LOCATION="${ARG#*=}"; shift; continue ;;
    *) echo "Unknown flag: $ARG" >&2; exit 2 ;;
  esac
done

# Validate flags
[[ -n "$NAME" ]]     || { echo "--name is required." >&2; exit 2; }
[[ -n "$FORMAT" ]]   || { echo "--format is required." >&2; exit 2; }
[[ -n "$LOCATION" ]] || { echo "--location is required." >&2; exit 2; }

# Guards
if [[ "$FORMAT" != "env" ]]; then
  echo "Unsupported --format '$FORMAT'. Only 'env' is supported for now." >&2
  exit 2
fi

# Commands
VALUE="$(ddev exec -s "$LOCATION" bash -lc "printenv $(printf '%q' "$NAME")" 2>/dev/null || true)"

if [[ -z "$VALUE" ]]; then
  echo "No '$FORMAT' value found for '$NAME' in '$LOCATION'." >&2
  exit 1
fi

printf '%s\n' "$VALUE"
